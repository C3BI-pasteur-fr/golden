
=head1 NAME

=over 4

=item B<golden> - Databank flat files entry retriever

=back

=head1 SYNOPSIS

=over 4

=item B<golden> [B<-achil>] [B<-o> F<file>] [B<-f> F<file1> F<file2> F<file3> F<...> F<fileN>] E<lt>F<dbase>:F<name> F<dbase>:F<name> ... F<dbase>:F<name>E<gt>

=back

=head1 OPTIONS

Following command line options are allowed:

=over 4

=item -a

Search entry by accession number.

=item -c

Check entry existence (do not display it, if found).

=item -h

Usage display.

=item -i

Search entry by entry name.

=item -l

List all available databanks.

=item -o F<file>

Output result in F<file>.

=item -f F<file1> F<file2> F<file3> F<...> F<fileN>

 Input query values are read from F<file1> F<file2> F<file3> F<...> F<fileN>.
 These files must contain F<dbase>:F<name> information separated by \n.
 Query results are sorted in the same order as query values are provided in input.
 See the example part for more information on file format.

=back

=head1 DESCRIPTION

B<golden> is a databank flat files entry retriever.

It search for entry F<name> in F<dbase> indexes. By default, both
accession number and entry names are searched (in that order), and the
first matching F<name> is displayed.

Search can be restricted to a single index type by setting one of the
following flags: B<-a> for accession numbers or B<-i> for entry
names. Setting both flags will restore the default search behaviour.

Since version 2.0, golden can perform search on multiple entries in different databanks in 1 time.

All entries found are displayed on the standard output (or written to a file if you used the -f option).
The list of entries that were not found is displayed on stderr.

=head1 RETURN CODES

Since version 3.4, return codes have changed:
0 all entries were found and no error occured during search.
1 at least 1 entry was not found (see stderr for the list of entries not found) and no error occured during search.
2 An error occurred (see stderr).

=head1 PYTHON BINDING

All golden versions provide a python export for calling golden from a python script.
It is compatible with at least python 2.7.

Version 1.0 and 1.1 provided the golden_access function for searching entries one at a time (python 2.7 only).
Version 2.0 and newer provide in addition the golden_access_new function for retrieving several entries in one time (python 2.7 only).
Version 3.4 provides in addition the entryIterator class for iteration over the requested entries (python 2.7 only).
Version 3.4.1 provides python bindings for python 3.4, python3.5 and python3.6. It still provides the python2.7 binding.
The Golden_access_new method was renamed in Golden_access_multi which is more understandable. The Golden_access_new method is still
provided to keep compatibility with old python scripts that were using it bit it is deprecated.

See the EXAMPLES section for more information.

=head1 EXAMPLES

=over 4

=item golden genbank:mmvasp embl:stuff1 embl:stuff2 genbank:otherAC uniprot:anotherLocus embl:stuff3

Search:
 entries named `mmvasp' and 'otherAC' in `genbank' databank,
 entries named 'stuff1', 'stuff2' and 'stuff3 in 'embl' databank' 
 entry named 'anotherLocus' in 'uniprot' databank.

Search is performed in both entry names and accession number indexes (default = both).

=item golden -i genbank:mmvasp embl:stuff1 embl:stuff2 genbank:otherAC uniprot:anotherLocus embl:stuff3

Same search but in entry names indexes only.

=item golden -l

List all available (indexed) databanks.

=item golden -f file1 file2 file3

Search all entries listed in file1, file2 and file3.

File format must be as follows:
 genbank:mmvasp\n
 embl:stuff1\n
 embl:stuff2\n
 genbank:otherAC\n
 uniprot:anotherLocus\n
 embl:stuff3
 
 =item python examples
 
 import Golden
 from entryIterator import entryIterator
 
 ids = ["uniprot:D0PRM9", "uniprot:D0PRM7", "uniprot:B8PWH5", "uniprot:test", "uniprot:Q66431", "uniprot:Q66431"]
 
 # Using 'access' method 
 for i in ids:
    print("Searching %s ... " % str(i), end="")
    print(i)
    flat = Golden.access(i.split(":")[0], i.split(":")[1])
    if flat is None:
        print("Not FOUND!")
    else:
        print("FOUND!")
        
# Using 'access_multi' method
 str_list_ids='\n'.join([str(x) for x in ids])
 str_list_ids+="\n"
 flat = Golden.access_multi(str_list_ids)
 while (flat!=None):
   print(flat)
   flat = Golden.access_multi(str_list_ids)
 
        
# using entry iterator
str_list_ids=' '.join([str(x) for x in ids])
for my_entry in entryIterator(str_list_ids):
    print(my_entry)
    print(" ")

 

=back

=head1 ENVIRONMENT

=over 10

=item GOLDENDATA

Used to specify an alternate golden indexes directory.

GOLDENDATA index directory must contain:
  1- index files generated by goldin (.acx and/or .icx, .dbx) or links to them.\n
  2- subdirectories (or links to subdirectories) with databanks base name and containing flat files.

For example, if you indexed uniprot with goldin, you should have :
  - index files (uniprot.acx and/or uniprot.icx plus uniprot.dbx)\n
  - a directory uniprot containing uniprot databank flat files.

It is crucial to keep consistency between index files name and name of the directory that contains your databank's flat files.

=back

=head1 SEE ALSO

=over 4

=item B<goldin>(1)

=back

=head1 AUTHOR

Nicolas Joly (njoly@pasteur.fr), Veronique Legrand (vlegrand@pasteur.fr) Institut Pasteur.
